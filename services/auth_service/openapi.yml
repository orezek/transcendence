openapi: 3.0.3
info:
  title: Auth Service API
  version: 1.0.0
  description: >
    A user authentication and session management API.  
    Endpoints allow for user registration, login, logout, session listing, token refreshing, and user profile updates/deletion.

servers:
  - url: http://localhost:80
    description: Local development server

tags:
  - name: User
    description: User-related actions
  - name: Auth
    description: Authentication/token-related actions
  - name: Sessions
    description: Session management endpoints

paths:

  /api/user:
    post:
      tags:
        - User
      summary: Create (register) a new user
      description: Creates a new user in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully"
        "400":
          description: Bad request - validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                    example: ["Username can't be blank", "Email is invalid"]

    delete:
      tags:
        - User
      summary: Delete (deactivate) the current user
      description: Deactivates the user and revokes all sessions. **Requires Bearer token**.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deleted"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorUnauthorized"

    patch:
      tags:
        - User
      summary: Partially update user attributes
      description: Updates user attributes (e.g., username, password). **Requires Bearer token**.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User updated successfully"
        "400":
          description: Validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                    example: ["Email is invalid"]
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorUnauthorized"

  /api/login:
    post:
      tags:
        - Auth
      summary: Login user
      description: Authenticates user with username and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Credentials"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  token:
                    type: string
                    description: Short-lived JWT access token
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        "400":
          description: Missing credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Username and password are required"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorUnauthorized"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorServer"

  /api/user/logout:
    post:
      tags:
        - Auth
      summary: Logout current session
      description: Revokes the current session for the authenticated user. **Requires Bearer token**.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorUnauthorized"

  /api/user/info:
    get:
      tags:
        - User
      summary: Get user info
      description: Retrieves information about the authenticated user. **Requires Bearer token**.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Return user data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User Data"
                  user_id:
                    type: integer
                    example: 12
                  username:
                    type: string
                    example: "myusername"
                  avatar:
                    type: string
                    example: "/images/default-avatar.png"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorUnauthorized"

  /api/token/refresh:
    post:
      tags:
        - Auth
      summary: Refresh a short-lived access token
      description: Exchanges a valid refresh token for a new short-lived access token. **Requires Bearer token**.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Refresh successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Refresh successful"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorUnauthorized"

  /api/sessions/logout/all:
    delete:
      tags:
        - Sessions
      summary: Logout all user sessions
      description: Revokes all sessions for the authenticated user. **Requires Bearer token**.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: All sessions invalidated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "All sessions invalidated"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorUnauthorized"

  /api/sessions:
    get:
      tags:
        - Sessions
      summary: List all active sessions for the user
      description: Returns an array of active sessions for the authenticated user. **Requires Bearer token**.
      security:
        - bearerAuth: []
      responses:
        "200":
          description: List of user sessions
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: array
                    description: Array of session objects
                    items:
                      $ref: "#/components/schemas/SessionData"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorUnauthorized"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # =====================================================
    # User and Session Entities
    # =====================================================
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
          example: "myusername"
        email:
          type: string
          format: email
          example: "me@example.com"
        avatar:
          type: string
          nullable: true
        active:
          type: boolean
          default: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    SessionData:
      type: object
      properties:
        id:
          type: integer
          example: 101
        user_id:
          type: integer
          example: 12
        refresh_token:
          type: string
          example: "eyJhbGciOiJI..."
        ip_address:
          type: string
          example: "127.0.0.1"
        user_agent:
          type: string
          example: "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
        expires_at:
          type: string
          format: date-time
        revoked:
          type: boolean
          default: false
        created_at:
          type: string
          format: date-time

    # =====================================================
    # Request Bodies
    # =====================================================
    UserCreate:
      type: object
      required:
        - username
        - password
        - email
      properties:
        username:
          type: string
          example: "myusername"
        password:
          type: string
          example: "mypassword"
        email:
          type: string
          format: email
          example: "me@example.com"
        avatar:
          type: string
          example: "/images/default-avatar.png"

    UserUpdate:
      type: object
      properties:
        username:
          type: string
          example: "mynewusername"
        password:
          type: string
          example: "mynewpassword"
        email:
          type: string
          format: email
          example: "newemail@example.com"
        avatar:
          type: string
          example: "/images/custom-avatar.png"

    Credentials:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "myusername"
        password:
          type: string
          example: "mypassword"

    # =====================================================
    # Common Error Schemas
    # =====================================================
    ErrorUnauthorized:
      type: object
      properties:
        error:
          type: string
          example: "Unauthorized"

    ErrorServer:
      type: object
      properties:
        error:
          type: string
          example: "An unexpected error occurred"
        details:
          type: string
          example: "Stack trace or more detail about the error"
